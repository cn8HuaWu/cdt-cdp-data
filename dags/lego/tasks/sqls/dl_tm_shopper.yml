EDW:
  create_table_query:
    # create table if not exists edw.d_dl_tm_shopper(
    #   shopperid varchar(255),
    #   openid varchar(255),
    #   pin varchar(255),
    #   member_id varchar(255),
    #   register_date date,
    #   sex varchar(10),
    #   birthday date,
    #   member_cluster varchar(30),
    #   member_grade varchar(30),
    #   shopper_cluster varchar(50),
    #   contribute_amt decimal(17,6),
    #   first_purchase_id varchar(100),
    #   first_purchase_date date,
    #   first_purchase_order_amt decimal(17,6),
    #   last_purchase_id varchar(100),
    #   last_purchase_date date,
    #   last_purchase_order_amt decimal(17,6),
    #   dl_batch_date varchar(8),
    #   dl_load_time timestamp,
    #   constraint pk_dl_tm_shopper_id primary key(shopperid)
    # )distributed by (shopperid);

    CREATE TABLE if not exists edw.d_dl_tm_shopper(
      shopperid varchar(255) not null,
      date_id date,
      register_time_his date,
      consignee_name varchar(255)  null,
      consignee_city varchar(255)  null,
      consignee_mobile varchar(255)  null,
      consignee_province varchar(255)  null,
      city_tier varchar(255)  null,
      is_member varchar(1) not null,
      name varchar(255),
      gender varchar(1),
      mobile varchar(255),
      birth_date varchar(20),
      age int,
      age_group varchar(255),
      grade varchar(255),
      active varchar(255)  null,
      active_type varchar(255)  null,
      new_0to9m varchar(1)  null,
      new_0to6m varchar(1)  null,
      new_0to3m varchar(1)  null,
      new_0to1m varchar(1)  null,
      new_0to1w varchar(1)  null,
      new_0to1d varchar(1)  null,
      new_3to6m varchar(1)  null,
      new_6to9m varchar(1)  null,
      new_9to12m varchar(1)  null,
      existing_retained varchar(1)  null,
      existing_reactivated_24 varchar(1)  null,
      existing_reactivated_36 varchar(1)  null,
      first_order_id varchar(255)  null,
      first_order_date timestamp  null,
      first_order_pcs int  null,
      first_order_gmv numeric(15,2)  null,
      first_order_rrp numeric(15,2)  null,
      recent_order_id varchar(255),
      recent_order_date timestamp  null,
      recent_order_pcs int  null,
      recent_order_gmv numeric(15,2)  null,
      recent_order_rrp numeric(15,2)  null,
      accu_order_cnt int  null,
      accu_order_gmv numeric(15,2)  null,
      accu_order_rrp numeric(15,2)  null,
      accu_order_pcs int  null,
      accu_order_theme int  null,
      return_order_cnt int  null,
      return_order_gmv numeric(15,2)  null,
      return_order_rrp numeric(15,2)  null,
      return_order_pcs int null,
      return_order_theme int  null,
      net_order_gmv numeric(15,2)  null,
      net_order_rrp numeric(15,2)  null,
      net_order_pcs int  null,
      net_order_theme int  null,
      dl_batch_date varchar(8),
      dl_load_time timestamp
    )
    DISTRIBUTED BY (shopperid);

    create table if not exists edw.tm_order_theme(
      shopperid varchar(255) not null,
      order_id  varchar(255) not null,
      order_date date not null,
      theme_name  varchar(255),
      theme_piece int,
      theme_gmv numeric(15,2) not null,
      theme_rrp numeric(15,2) ,
      type varchar(255) not null
    )DISTRIBUTED BY (shopperid);

    create table edw.d_dl_tm_shopper_agerange
    (
      age int,
      range varchar(10)
    );

    with recursive t(n) as (
      select 0
      union
      select n+1 from t where n<99
    )
    insert into edw.d_dl_tm_shopper_agerange
     select n,
      (n/5*5)::varchar(3)||' ~ ' ||((n/5+1)*5 -1)::varchar(3)
     from t;

  daily_update_shopper:
    delete from edw.d_dl_tm_shopper where date_id = to_date('{dl_batch_date}','yyyymmdd');
    
    with shopip_collect as(
    select
        shopperid,
        parent_order_id,
        return_order_id,
        date(payment_confirm_time) as payment_confirm_date,
        net_order_rrp,
        order_gmv_amount,
        sku_piece_cnt,
        accu_order_theme,
        net_order_theme,
        return_order_theme,
        return_sku_rrp,
        return_sku_gmv,
        return_piece_cnt,
        row_number() over(partition by shopperid order by payment_confirm_time desc) as desc_rk,
        row_number() over(partition by shopperid order by payment_confirm_time asc) as asc_rk
    from (
        select
          o.shopperid,
          o.parent_order_id,
          max(r.related_order_id) as return_order_id,
          max(COALESCE(o.payment_confirm_time, o.order_start_date)) as payment_confirm_time,
          sum(od.lego_sku_rrp_price * od.piece_cnt) as net_order_rrp, 
          sum(od.order_gmv_amount) as order_gmv_amount,
          sum( od.piece_cnt) as sku_piece_cnt,
          count(distinct top_theme) as accu_order_theme,
          count(distinct case when r.related_order_id is not null then null else top_theme end) as net_order_theme,
          count(distinct case when r.related_order_id is null then null else top_theme end) as return_order_theme,
          sum(r.sku_rrp) as return_sku_rrp,
          sum(r.sku_actual_paid_amount) as return_sku_gmv,
          sum(r.return_piece_cnt) as return_piece_cnt
      from edw.f_oms_order o
          inner join edw.f_oms_order_dtl od on o.parent_order_id = od.parent_order_id
          left join(
              SELECT
                  o.related_order_id,
                  d.sku_rrp,
                  d.sku_actual_paid_amount,
                  d.sku_number::int as return_piece_cnt
              FROM edw.f_oms_return_order_dtl d
                  inner join edw.f_oms_return_order o on d.return_order_id =o.return_order_id
          )r on o.parent_order_id = r.related_order_id
          left join ( 
              select * from (
                  select top_theme, lego_sku_id, row_number() over(partition by lego_sku_id order by year_version::int desc) as rk
                  from edw.d_dl_product_info 
              )pp where pp.rk = 1
          )p on od.lego_sku_id = p.lego_sku_id
      where od.is_gwp='N'  and o.shopperid is not null and od.lego_sku_id !='4581715'
      group by  o.shopperid, o.parent_order_id
    )dtl
    ),
    consignee_mobile as
    (
    select shopperid, consignee_mobile
    from (
        select
           shopperid, consignee_mobile,
            row_number() over(partition by shopperid order by mobile_cnt, order_start_date desc) as rk
        from (
            SELECT
                shopperid ,
                consignee_mobile,
                count(distinct id) mobile_cnt ,
                max(COALESCE(payment_confirm_time, order_start_date)) as order_start_date
            FROM edw.f_oms_order
            where city is not null
            group by shopperid, consignee_mobile
        )a
    )b where b.rk =1
    ),
    consignee_city as (
    select shopperid, consignee_city, c.province as consignee_province, c.city_tier
    from (
        select
            *,
            row_number() over(partition by shopperid order by city_cnt, order_start_date desc) as rk
        from (
            SELECT
                shopperid ,
                city as consignee_city,
                count(distinct id) city_cnt ,
                max(COALESCE(payment_confirm_time, order_start_date)) as order_start_date
            FROM edw.f_oms_order
            where city is not null
            group by shopperid, city
        )a
      )b left join edw.d_dl_city_tier c on b.consignee_city = c.city_chn
      where b.rk =1
    ),
    consignee_name as(
      select shopperid, consignee_name
      from (
        select
          shopperid, consignee_name,
          row_number() over(partition by shopperid order by name_cnt, order_start_date desc) as rk
        from (
            SELECT
              shopperid ,
              consignee_name,
              count(distinct id) name_cnt ,
              max(COALESCE(payment_confirm_time, order_start_date)) as order_start_date
            FROM edw.f_oms_order
            where city is not null
            group by shopperid, consignee_name
        )a
      )b where b.rk =1
    )
    insert into edw.d_dl_tm_shopper(
      shopperid,
      date_id,
      register_time_his,
      consignee_name,
      consignee_city,
      consignee_mobile,
      consignee_province,
      city_tier,
      is_member,
      name,
      gender,
      mobile,
      birth_date,
      age,
      age_group,
      grade,
      active,
      active_type,
      new_0to9m,
      new_0to6m,
      new_0to3m,
      new_0to1m,
      new_0to1w,
      new_0to1d,
      new_3to6m,
      new_6to9m,
      new_9to12m,
      existing_retained,
      existing_reactivated_24,
      existing_reactivated_36,
      first_order_id,
      first_order_date,
      first_order_pcs,
      first_order_gmv,
      first_order_rrp,
      recent_order_id,
      recent_order_date,
      recent_order_pcs,
      recent_order_gmv,
      recent_order_rrp,
      accu_order_cnt,
      accu_order_gmv,
      accu_order_rrp,
      accu_order_pcs,
      accu_order_theme,
      return_order_cnt,
      return_order_gmv,
      return_order_rrp,
      return_order_pcs,
      return_order_theme,
      net_order_gmv,
      net_order_rrp,
      net_order_pcs,
      net_order_theme,
      dl_batch_date,
      dl_load_time
    )
    select
      t1.shopperid,
      now(),
      m.tm_1st_purchase_date as register_time_his,
      t4.consignee_name,
      t3.consignee_city,
      t2.consignee_mobile,
      t3.consignee_province,
      t3.city_tier,
      case when m.shopperid is not null then 'Y' else 'N' end as is_member,
      m.name,
      m.gender,
      m.mobile,
      m.birthday,
      extract(year from now()) - m.birth_year as age,
      case when extract(year from now()) - m.birth_year > 99 then '99+' else g.range end as age_group,
      m.member_grade,
      active,
      active_type,
      new_0to9m,
      new_0to6m,
      new_0to3m,
      new_0to1m,
      new_0to1w,
      new_0to1d,
      new_3to6m,
      new_6to9m,
      new_9to12m,
      existing_retained,
      existing_reactivated_24,
      existing_reactivated_36,
      first_order_id,
      first_order_date,
      first_order_pcs,
      first_order_gmv,
      first_order_rrp,
      recent_order_id,
      recent_order_date,
      recent_order_pcs,
      recent_order_gmv,
      recent_order_rrp,
      accu_order_cnt,
      accu_order_gmv,
      accu_order_rrp,
      accu_order_pcs,
      accu_order_theme,
      return_order_cnt,
      return_order_gmv,
      return_order_rrp,
      return_order_pcs,
      return_order_theme,
      net_order_gmv,
      net_order_rrp,
      net_order_pcs,
      net_order_theme,
      '{dl_batch_date}',
      now()
    from(
        select
          shopperid,
          case when extract(day from now() - max(payment_confirm_date))<=365 then 'Y' else 'N' end as active,
          case when extract(day from now() - max(payment_confirm_date))<=365 and extract(day from now() - min(payment_confirm_date))<=365 then 'new'
              when extract(day from now() - max(payment_confirm_date))<=365 and extract(day from now() - min(payment_confirm_date))>365 then 'existing'
              else null end as active_type,
          case when extract(day from now() - min(payment_confirm_date))<=270 then 'Y' else 'N' end as new_0to9m,
          case when extract(day from now() - min(payment_confirm_date))<=180 then 'Y' else 'N' end as new_0to6m,
          case when extract(day from now() - min(payment_confirm_date))<=90 then 'Y' else 'N' end as new_0to3m,
          case when extract(day from now() - min(payment_confirm_date))<=30 then 'Y' else 'N' end as new_0to1m,
          case when extract(day from now() - min(payment_confirm_date))<=30 then 'Y' else 'N' end as new_0to1w,
          case when extract(day from now() - min(payment_confirm_date))<=1 then 'Y' else 'N' end as new_0to1d,
          case when extract(day from now() - min(payment_confirm_date))>=90 and extract(day from now() - min(payment_confirm_date))<180 then 'Y' else 'N' end as new_3to6m,
          case when extract(day from now() - min(payment_confirm_date))>=180 and extract(day from now() - min(payment_confirm_date))<270  then 'Y' else 'N' end as new_6to9m,
          case when extract(day from now() - min(payment_confirm_date))>=270 and extract(day from now() - min(payment_confirm_date))<360 then 'Y' else 'N' end as new_9to12m,
          case when extract(day from now() - max(payment_confirm_date))<=365 and
              max(case when extract(day from now() - payment_confirm_date) >= 360 and extract(day from now() - payment_confirm_date)<720  then 'Y'  else null end)='Y' then 'Y'else 'N' end as existing_retained,
          case when extract(day from now() - max(payment_confirm_date))<=365 and
              and max(case when extract(day from now() - payment_confirm_date) >= 360 and extract(day from now() - payment_confirm_date)<720  then 'Y'  else null end) is null
              and max(case when extract(day from now() - payment_confirm_date) >= 720 and extract(day from now() - payment_confirm_date)<1080 then 'Y'  else null end)='Y' then 'Y' else 'N' end as existing_reactivated_24,
          case when extract(day from now() - max(payment_confirm_date))<=365 and
              and max(case when extract(day from now() - payment_confirm_date) >= 360 and extract(day from now() - payment_confirm_date)<1080  then 'Y'  else null end) is null
              max(case when extract(day from now() - payment_confirm_date) >= 1080  then 'Y'  else null end)='Y' then 'Y' else 'N' end as existing_reactivated_36,
          count(distinct parent_order_id) as accu_order_cnt,
          sum(order_gmv_amount) as accu_order_gmv,
          sum(net_order_rrp) as accu_order_rrp,
          sum(sku_piece_cnt) as accu_order_pcs,
          sum(accu_order_theme) as accu_order_theme,
          count(distinct return_order_id ) as return_order_cnt,
          sum(return_sku_gmv) as return_order_gmv,
          sum(return_sku_rrp) as return_order_rrp,
          sum(return_piece_cnt) as return_order_pcs,
          sum(return_order_theme) as return_order_theme,
          COALESCE(sum(order_gmv_amount) - sum(return_sku_gmv), sum(order_gmv_amount) ) as net_order_gmv,
          COALESCE(sum(net_order_rrp) - sum(return_sku_rrp), sum(net_order_rrp)) as net_order_rrp,
          COALESCE(sum(sku_piece_cnt) - sum(return_piece_cnt), sum(sku_piece_cnt)) as net_order_pcs,
          sum(net_order_theme) as net_order_theme,
          max(case when desc_rk = 1 then parent_order_id else null end) as recent_order_id,
          max(payment_confirm_date) as recent_order_date,
          max(case when desc_rk = 1 then sku_piece_cnt else 0 end) as recent_order_pcs,
          max(case when desc_rk = 1 then order_gmv_amount else 0 end) as recent_order_gmv,
          max(case when desc_rk = 1 then net_order_rrp else 0 end) as recent_order_rrp,
          max(case when asc_rk = 1 then parent_order_id else null end) as first_order_id,
          min(payment_confirm_date) as first_order_date,
          max(case when asc_rk = 1 then sku_piece_cnt else 0 end) as first_order_pcs,
          max(case when asc_rk = 1 then order_gmv_amount else 0 end) as first_order_gmv,
          max(case when asc_rk = 1 then net_order_rrp else 0 end) as  first_order_rrp
      from shopip_collect s
      group by shopperid
    )t1 inner join consignee_mobile t2 on t1.shopperid = t2.shopperid
        inner join consignee_city t3 on t1.shopperid = t3.shopperid
        inner join consignee_name t4 on t1.shopperid = t4.shopperid
        left join (select * from edw.d_tm_member  where current_row='Y') m on t1.shopperid = m.shopperid
        left join edw.d_dl_tm_shopper_agerange g on extract(year from now()) - m.birth_year = g.age;

  tm_order_theme_update:
    create temp table order_collect as 
    select * from (
      select 
        o.shopperid ,
        o.parent_order_id ,
        COALESCE(o.payment_confirm_time, o.order_start_date) as payment_confirm_time,
        p.top_theme,
        od.piece_cnt ,
        od.order_gmv_amount,
        od.lego_sku_rrp_price,
        row_number() over(partition by o.shopperid  order by COALESCE(o.payment_confirm_time, o.order_start_date) desc) as last_order_rk,
        row_number() over(partition by o.shopperid  order by COALESCE(o.payment_confirm_time, o.order_start_date) asc) as first_order_rk
      from edw.f_oms_order o
          inner join edw.f_oms_order_dtl od on o.parent_order_id = od.parent_order_id
          left join ( 
                select * from (
                    select top_theme, lego_sku_id, row_number() over(partition by lego_sku_id order by year_version::int desc) as rk
                    from edw.d_dl_product_info 
                )pp where pp.rk = 1
            )p on od.lego_sku_id = p.lego_sku_id
      where od.is_gwp='N' and o.shopperid is not null and od.lego_sku_id !='4581715'
    )a where last_order_rk =1 or first_order_rk =1 ;

    insert into edw.tm_order_theme
    select 
      c.shopperid,
      c.parent_order_id,
      c.payment_confirm_time,
      c.top_theme,
      c.piece_cnt,
      c.order_gmv_amount,
      c.lego_sku_rrp_price,
      'first'
    from order_collect c left join (select * from edw.tm_order_theme where type='first' ) t on c.shopperid =t.shopperid
    where c.first_order_rk = 1
    and t.shopperid is null;

    delete from edw.tm_order_theme t
    where exists(
      select 1 from order_collect c 
      where t.shopperid = c.shopperid 
        and c.last_order_rk = 1
        and c.payment_confirm_time > t.order_date
    ) and type='last';

    insert into edw.tm_order_theme
    select 
      c.shopperid,
      c.parent_order_id,
      c.payment_confirm_time,
      c.top_theme,
      c.piece_cnt,
      c.order_gmv_amount,
      c.lego_sku_rrp_price,
      'last'
    from order_collect c left join (select * from edw.tm_order_theme where type='last' ) t on c.shopperid = t.shopperid
    where c.last_order_rk = 1
    and t.shopperid is null ;

  # sync_to_rds_dm:
  #   create table if not exists dm.d_dl_tm_shopper (like frn.d_dl_tm_shopper);
  #   delete from dm.d_dl_tm_shopper;
  #   delete from dm.d_dl_tm_shopper;
  #   insert into dm.d_dl_tm_shopper  select *   from frn.d_dl_tm_shopper;

  # update_by_oms_order_dtl:
      # delete from edw.d_dl_tm_shopper;
      # insert into edw.d_dl_tm_shopper(
      #        shopperid,
      #        shopper_cluster,
      #        contribute_amt,
      #        first_purchase_id,
      #        first_purchase_date,
      #        first_purchase_order_amt,
      #        last_purchase_id,
      #        last_purchase_date,
      #        last_purchase_order_amt,
      #        dl_batch_date,
      #        dl_load_time,
      #        member_id,
      #        register_date,
      #        sex,
      #        birthday,
      #        member_cluster,
      #        member_grade
      # )
      # select a.*,
      #        null member_id,
      #        null register_date,
      #        null sex,
      #        null birthday,
      #        null member_cluster,
      #        null member_grade
      # from (SELECT shopperid,
      #              case when count(distinct date_id) = 1 then 'New Shopper' else 'Exist Shopper' end shopper_cluster,
      #              sum(case when lego_sku_gmv_price >= 19 and is_gwp = 'N' then order_gmv_amount end) contribute_amt,
      #              max(case when min_order_date = create_time then parent_order_id end) first_purchase_id,
      #              max(case when min_order_date = create_time then date_id end) first_purchase_date,
      #              sum(case when min_order_date = create_time and lego_sku_gmv_price >= 19 and is_gwp = 'N' then order_gmv_amount end) first_purchase_order_amt,
      #              max(case when max_order_date = create_time then parent_order_id end) last_purchase_id,
      #              max(case when max_order_date = create_time then date_id end) last_purchase_date,
      #              sum(case when max_order_date = create_time and lego_sku_gmv_price >= 19 and is_gwp = 'N' then order_gmv_amount end) last_purchase_order_amt,
      #              to_char(now(),'yyyymmdd') dl_batch_date,
      #              now() dl_load_time
      #     FROM (select shopperid,
      #                  parent_order_id,
      #                  create_time,
      #                  date_id,
      #                  lego_sku_gmv_price,
      #                  order_gmv_amount,
      #                  is_gwp,
      #                  max(create_time) over(partition by shopperid) max_order_date,
      #                  min(create_time) over(partition by shopperid) min_order_date
      #             from edw.f_oms_order_dtl
      #            where shopperid is not null) a
      #     group by shopperid) a
      #     ;
