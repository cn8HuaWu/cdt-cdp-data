Staging:
  src_file_list:
    2018-05.csv,
    2018-06.csv,
    2018-07.csv,
    2018-08.csv,
    2018-09.csv,
    2018-10.csv,
    2018-11.csv,
    2018-12.csv,
    2019-01.csv,
    2019-02.csv
  src_columns:
    parent_order_id text,
    store_sku_id text,
    store_sku_name text,
    piece_cnt text,
    payment_type text,
    order_create_time text,
    jd_price text,
    order_amount text,
    actual_amount text,
    balance_paid text,
    payable_amount text,
    order_status text,
    order_type text,
    pin text,
    cosignee_name text,
    delivery_address text,
    cosignee_contact text,
    remark text,
    invoice_type text,
    invoice_title text,
    invoice_info text,
    taxpayerid text,
    taxpayer_name text,
    taxpayer_address text,
    taxpayer_phone text,
    taxpayer_deposit_bank text,
    taxpayer_bank_account text,
    dealer_remark text,
    dealer_remark_level text,
    postage text,
    payment_confirm_time text,
    item_no text,
    order_completed_time text,
    ordered_from text,
    order_channel text,
    is_installation_required text,
    service_fee text,
    warehouseid text,
    warehouse_name text,
    dealer_skuid text,
    email text,
    zipcode text,
    is_brand_order text,
    is_toplife_order text,
    business_type text,
    performed_storeid text,
    ordered_storeid text,
    sa_account text

ODS:

EDW:
  create_table_query:
    create table if not exists edw.f_jd_pop_order_dtl_his(
    parent_order_id  varchar(100),
    store_sku_id  varchar(100),
    store_sku_name  varchar(255),
    piece_cnt decimal(11),
    payment_type  varchar(255),
    order_create_time timestamp ,
    jd_price decimal(17,6),
    order_amount decimal(17,6),
    actual_amount decimal(17,6),
    balance_paid decimal(17,6),
    payable_amount decimal(17,6),
    order_status  varchar(255),
    order_type  varchar(255),
    pin  varchar(255),
    cosignee_name  varchar(255),
    delivery_address  varchar(255),
    cosignee_contact  varchar(255),
    remark  varchar(255),
    invoice_type  varchar(255),
    invoice_title  varchar(255),
    invoice_info  varchar(255),
    taxpayerid  varchar(255),
    taxpayer_name  varchar(255),
    taxpayer_address  varchar(255),
    taxpayer_phone  varchar(255),
    taxpayer_deposit_bank  varchar(255),
    taxpayer_bank_account  varchar(255),
    dealer_remark  varchar(2000),
    dealer_remark_level  varchar(255),
    postage decimal(17,6),
    payment_confirm_time timestamp ,
    item_no  varchar(255),
    order_completed_time timestamp ,
    ordered_from  varchar(255),
    order_channel  varchar(255),
    is_installation_required  varchar(255),
    service_fee decimal(17,6),
    warehouseid  varchar(255),
    warehouse_name  varchar(255),
    dealer_skuid  varchar(255),
    email  varchar(255),
    zipcode  varchar(255),
    is_brand_order  varchar(255),
    is_toplife_order  varchar(255),
    business_type  varchar(255),
    performed_storeid  varchar(255),
    ordered_storeid  varchar(255),
    sa_account  varchar(255),
    dl_batch_date varchar(8),
    dl_load_time timestamp
    )distributed by (parent_order_id, store_sku_id );
  
  insert_edw_from_ods_query:
    insert into edw.f_jd_pop_order_dtl_his ( 
    parent_order_id,
    store_sku_id,
    store_sku_name,
    piece_cnt,
    payment_type,
    order_create_time,
    jd_price,
    order_amount,
    actual_amount,
    balance_paid,
    payable_amount,
    order_status,
    order_type,
    pin,
    cosignee_name,
    delivery_address,
    cosignee_contact,
    remark,
    invoice_type,
    invoice_title,
    invoice_info,
    taxpayerid,
    taxpayer_name,
    taxpayer_address,
    taxpayer_phone,
    taxpayer_deposit_bank,
    taxpayer_bank_account,
    dealer_remark,
    dealer_remark_level,
    postage,
    payment_confirm_time,
    item_no,
    order_completed_time,
    ordered_from,
    order_channel,
    is_installation_required,
    service_fee,
    warehouseid,
    warehouse_name,
    dealer_skuid,
    email,
    zipcode,
    is_brand_order,
    is_toplife_order,
    business_type,
    performed_storeid,
    ordered_storeid,
    sa_account,
    dl_batch_date ,
    dl_load_time )
    select
    parent_order_id,
    store_sku_id,
    store_sku_name ,
    case when trim(piece_cnt) ='' then null::decimal(11) else piece_cnt::decimal(11) end,
    payment_type ,
    to_timestamp(trim(order_create_time), 'YYYY-MM-DD HH24:MI:SS') as order_create_time,
    case when trim(jd_price) ='' then null::decimal(17,6) else jd_price::decimal(17,6) end as jd_price,
    case when trim(order_amount) ='' then null::decimal(17,6) else order_amount::decimal(17,6) end as order_amount,
    case when trim(actual_amount) ='' then null::decimal(17,6) else actual_amount::decimal(17,6) end as actual_amount,
    case when trim(balance_paid) ='' then null::decimal(17,6) else balance_paid::decimal(17,6) end as balance_paid,
    case when trim(payable_amount) ='' then null::decimal(17,6) else payable_amount::decimal(17,6) end as payable_amount,
    order_status ,
    order_type ,
    pin ,
    cosignee_name ,
    delivery_address ,
    cosignee_contact ,
    remark ,
    invoice_type ,
    invoice_title ,
    invoice_info ,
    taxpayerid ,
    taxpayer_name ,
    taxpayer_address ,
    taxpayer_phone ,
    taxpayer_deposit_bank ,
    taxpayer_bank_account ,
    dealer_remark ,
    dealer_remark_level ,
    case when trim(postage) ='' then null::decimal(17,6) else postage::decimal(17,6) end as postage,
    to_timestamp(trim(payment_confirm_time), 'YYYY-MM-DD HH24:MI:SS') as payment_confirm_time,
    item_no ,
    to_timestamp(trim(order_completed_time), 'YYYY-MM-DD HH24:MI:SS') as order_completed_time,
    ordered_from ,
    order_channel ,
    is_installation_required ,
    case when trim(service_fee) ='' then null::decimal(17,6) else service_fee::decimal(17,6) end as service_fee,
    warehouseid ,
    warehouse_name ,
    dealer_skuid ,
    email ,
    zipcode ,
    is_brand_order ,
    is_toplife_order ,
    business_type ,
    performed_storeid ,
    ordered_storeid ,
    sa_account ,
    to_char(now(), 'yyyymmdd'),
    now()
    from
    ods.r_jd_pop_order_dtl_his;

  load_history:
    delete from edw.f_jd_pop_order_dtl where id ~ E'his.*';

    drop sequence  if exists sequence_his_pop_order_dtl_id;
    create sequence sequence_his_pop_order_dtl_id increment by 1 minvalue 1 no maxvalue start with 1;
    insert into edw.f_jd_pop_order_dtl(
      id,
      parent_order_id, 
      shopperid, 
      date_id, 
      pin, 
      order_start_date, 
      order_end_date, 
      order_state, 
      store_sku_id,
      store_sku_name, 
      sku_price, 
      piece_cnt,
      lego_sku_id, 
      lego_sku_name_en, 
      lego_sku_rrp_price, 
      lego_sku_gmv_price, 
      order_gmv_amount, 
      order_rrp_amount, 
      lego_sku_line,
      lego_sku_status, 
      cn_launchdate, 
      cn_store_launchdate,
      dl_batch_date, 
      dl_load_time
    )
    select 
      'his_'|| nextval('sequence_his_pop_order_dtl_id'),
      odh.parent_order_id,
      COALESCE(c.openid, odh.pin)  shopperid,
      odh.order_create_time::date date_id,
      odh.pin,
      odh.order_create_time,
      odh.order_completed_time,
      odh.order_status,
      odh.store_sku_id,
      odh.store_sku_name,
      odh.jd_price,
      odh.piece_cnt,
      skm.lego_sku_id,    
      p.lego_sku_name_en lego_sku_name_en,
      p.rsp lego_sku_rrp_price,
      null lego_sku_gmv_price,
      null order_gmv_amount,
      p.rsp*odh.piece_cnt*1.0  order_rrp_amount,
      p.cn_line lego_sku_line,
      p.product_status lego_sku_status,
      p.bu_cn_launch_date cn_launchdate,
      p.cn_jd_pop_launch_date cn_store_launchdate,
      odh.dl_batch_date ,
      now()
    from edw.f_jd_pop_order_dtl_his odh
      left join edw.d_bu_jd_pop_sku_map skm on odh.store_sku_id  = skm.store_sku_id
      left join (select *,row_number() over(partition by lego_sku_id order by year_version desc) rn from edw.d_dl_product_info) p 
                    on skm.lego_sku_id = p.lego_sku_id 
                   and p.rn = 1
      left join (
        select a.pin, b.openid
        from(
          select distinct pin from edw.f_jd_pop_order_dtl_his
        )a left join(
          select distinct pin, openid from edw.f_jd_pop_order_dtl where openid is not null
        )b on a.pin = b.pin
      )c on odh.pin = c.pin;
    drop sequence  if exists sequence_his_pop_order_dtl_id;

    insert into edw.f_jd_pop_order
    (
      parent_order_id,
      order_total_price,
      order_amt,
      order_start_date,
      order_end_date,
      invoice_info,
      province,
      city,
      order_state,
      date_id
    )
    select 
      parent_order_id,
      order_amount as order_total_price,
      actual_amount as order_amt,
      order_create_time order_start_time,
      order_completed_time order_end_time,
      invoice_type,
      (string_to_array(edw.func_parse_address(delivery_address),','))[1] province,
      (string_to_array(edw.func_parse_address(delivery_address),','))[2] city,
      order_status,
      order_create_time::date date_id
    from edw.f_jd_pop_order_dtl_his
    group by parent_order_id ,order_create_time, order_amount,actual_amount,
      order_completed_time, invoice_type,
      (edw.func_parse_address(delivery_address)),
      order_status;
   